[what is redux?]
=================

===>{{Redux is a predictable state container for JavaScript apps}}
===> ((The whole goal of Redux is to increase predictability))
[How it work]
=============
You’ve learned how Redux makes state management more predictable:
in order to change the store’s state, an action describing that 
change must be dispatched to the reducer. In turn, 
the reducer produces the new state. 
This new state replaces the previous state in the store. 
So the next time store.getState() is called,
the new, most up-to-date state is returned.
[[\\\\\\\\\\\state tree//////////]]
state of our app===> 
==========================
* contains one object for all data in our app
* we interact with state tree by three ways
[1]==> getting our state
[2]==> listen and respond to state changes
[3]==> updating our state
------------------------------------------
[[[\\\\\  STORE /////////]]]
============================
* the store has the following information:
[1]==> the state tree
[2]==> a way to get the state tree
[3]==> a way to listen and respond to the state changing
[4]==> a way to update the state
------------------------------------------
(((\\\\\\\\\\ CREATE_OUR_STORE //////////////)))
==========================
we'll start with a blank [index.js] file and create a factory function
that creates store objects. Then we'll have the store keep 
track of the state, and we'll write the method to get the 
state from the store.
------->>>>>
function createStore (reducer) {
`// The store should have four parts`
    // 1. The state
    // 2. Get the state. ==> `getState()`
    // 3. Listen to changes on the state. ==>`subscribe()`
    // 4. Update the state. ==> `dispatch()`
  
    let state; // equal undefined
    Let listeners = [];
    `// the function which getState`
    const getState = () => state;
    `// the function which listen  to our state`
    // listener argument is an func
    const subscribe = (listener) => {
        listeners.push(listener)
        `// TO UNSUBSCRIBE`
        return () => {
          listeners = listeners.filter((l) => l !== listener)
        }
    }
    // updating our store via dispatch
    const dispatch = (action) => {
        state = reducer(state, action)
        listeners.forEach((listener) => listener())
    }
    
    return {
        getState,
        subscribe,
        dispatch,
    }
}
`//ConstantsActions`
const ADD_TODO = 'ADD_TODO'
const REMOVE_TODO = 'REMOVE_TODO'
const TOGGLE_TODO = 'TOGGLE_TODO'
const ADD_GOAL = 'ADD_GOAL'
const REMOVE_GOAL = 'REMOVE_GOAL'

`// make action creators`
function addTodoAction (todo) {
    return {
      type: ADD_TODO,
      todo,
    }
}
  
function removeTodoAction (id) {
    return {
      type: REMOVE_TODO,
      id,
    }
}
  
function toggleTodoAction (id) {
    return {
      type: TOGGLE_TODO,
      id,
    }
}
  
function addGoalAction (goal) {
    return {
      type: ADD_GOAL,
      goal,
    }
}
  
function removeGoalAction (id) {
    return {
      type: REMOVE_GOAL,
      id,
    }
}
`// reducer it is a pure function which update state`
//todosReducer
function todos (state = [], action) {
    switch(action.type) {
      case ADD_TODO :
        return state.concat([action.todo])
      case REMOVE_TODO :
        return state.filter((todo) => todo.id !== action.id)
      case TOGGLE_TODO :
        return state.map((todo) => todo.id !== action.id ? todo :
          Object.assign({}, todo, { complete: !todo.complete }))
      default :
        return state
    }
}
//goalsReducer
function goals (state = [], action) {
    switch(action.type) {
      case ADD_GOAL :
        return state.concat([action.goal])
      case REMOVE_GOAL :
        return state.filter((goal) => goal.id !== action.id)
      default :
        return state
    }
  }
`// we can't do const store = createStore(todos ,goals);`
//RootReducer
function app (state = {}, action) {
    `this func combine two reducers`
    return {
      todos: todos(state.todos, action),
      goals: goals(state.goals, action),
    }
}
const store = createStore(app); 
`//subscribe() helps connect react component to the store`
store.subscribe(()=>{
    console.log('new updated state' , store.getState());
});
/*
    store.dispatch({
        type: ADD_TODO,
        todo: {
        id: 0,
        name: 'Learn Redux',
        complete: false
        }
    })
`change this from passed action object to pass action creator function !!`
*/
store.dispatch(addTodoAction({
    id: 0,
    name: 'Learn Redux',
    complete: false
}))
  
store.dispatch(removeTodoAction(1))

store.subscribe(()=>{
    console.log('new updated state' , store.getState());
});
store.dispatch(addTodoAction({
    id: 1,
    name: 'Wash the car',
    complete: false,
}))
store.subscribe(()=>{
    console.log('the store changed');
});
`// unsubscribe state changes`
const unsubscribe = store.subscribe(()=>{
    console.log('the store changed');
});
unsubscribe();

--------
toUpdate state we must know some rules 
================================
([1] Only an event can change the state of the store.)

    ==>When an event takes place in a Redux application, 
    we use a plain JavaScript object to keep track of what the specific event was.
    This object is called an {{Action}}.
    {
        type: "ADD_PRODUCT_TO_CART"
    }
    ==>As you can see, an Action is clearly just a plain JavaScript object.
    What makes this plain JavaScript object special in Redux,
    is that every Action must have a type property. 
    The purpose of the type property is to let our app (Redux)
    know exactly what event just took place.
    This Action tells us that a product was added to the cart.
    ====
    Now, since an Action is just a regular object, 
    we can include extra data about the event that took place
    {
        type: "ADD_PRODUCT_TO_CART",
        productId: 17
    }
[[HINT]]
===>
it's better practice to pass as little data as possible in each action
{{Action Creators}}
==============
functions that create/return action objects.
__>>const addItem = item => ({
        type: ADD_ITEM,
        item
    });
([2]The function that returns the new state needs to be a pure function.)
    [[What are Pure Functions?]]
    ============================
    [1] Return the same result if the same arguments are passed in
    [2] Depend solely on the arguments passed into them
    [3] Do not produce side effects, such as API requests and I/O (input/output) operations like:
    The 'console.log' statement is an I/O (input/output) operation, 
    which alters the calling function into an impure function.
-------------
// `square()` is a pure function

__>>const square = x => x * x;

// `calculateTip()` is an impure function

__>>
const tipPercentage = 0.15;
const calculateTip = cost => cost * tipPercentage;
------>>
    calculateTip() calculates and returns a number value. 
    However, it relies on a variable (tipPercentage) that lives 
    outside the function to produce that value. 
    Since it fails one of the requirements of pure functions,
    calculateTip() is an impure function. 
    However, we could convert this function to a pure function 
    by passing in the outside variable,tipPercentage, as a second 
    argument to this function!

__>>const calculateTip = (cost, tipPercentage = 0.15) => cost * tipPercentage;

===>[[ Why Pure Functions Are Great]]
==========================
    For our purposes, the most important feature of a pure function
    **  is that it's predictable so it's easy to test. 
        If we have a function that takes in our state
        and an action that occurred,
        the function should (if it's pure!) 
        return the exact same result every single time.
    **  Pure functions simplify state management
=========================
    [[Pure Functions]]
    ==================
    Two things need to be true for a function to be pure.
    
    [1]First condition: 
    ------------------
    A function can be pure if and only if the only thing it uses to calculate
    its output are the arguments you pass it, and local variables declared 
    inside of the function itself.
    __>>
    function greetUser (user, greeting='Hello') {
        return `${greeting}, ${user.firstName} ${user.lastName}!`
    }
      
    const joe = {
        firstName: 'Joe',
        lastName: 'Schmoe'
    }
      
    greetUser(joe) // 'Hello, Joe Schmoe!'

    [2]Second condition: 
    ----------------------
    A function can be pure if and only if it does not change 
    state outside of its own scope.
    __>>
    const joe = {
        firstName: 'Joe',
        lastName: 'Schmoe'
    }
      
    function impureUpdate () {
        joe.firstName = 'JOE'
    }
      
    joe.firstName // 'Joe'
      
    // A
    impureUpdate() // changes `joe`'s `firstName` property
      
    // B
    joe.firstName // 'JOE
    ------------------------------------
    If a function does change state outside of its scope, 
    as does unsafeUpdate, it is said to have side effects. So, another, 
    more common way of stating this condition is:
    A function can only be pure if it has no side effects.

    By the way, side effects include things like 
    * I/O and printing to the console. 
    * So, anything involving console.log, fs.readFile, etc., 
    is technically "impure". 
    ========================================================
-=middleware=-
==================>>>>>
!!*what happen when you want to doesn't dispatch sepecific 
action if something happened*!!

manually you can make a func like::
[start code]
function checkAndDispatch (store, action) {
    #todos reducer checker
    if (
      action.type === ADD_TODO &&
      action.todo.name.toLowerCase().includes('bitcoin')
    ) {
      return alert("Nope. That's a bad idea.")
    }
    #goal reducer checker
    if (
      action.type === ADD_GOAL &&
      action.goal.name.toLowerCase().includes('bitcoin')
    ) {
      return alert("Nope. That's a bad idea.")
    }
  
    return store.dispatch(action)
}
[end code]
[1] when checkAndDispatch ==>{{invoked}}==>(if condition ===true )==>
    "return" => alert("Nope. That's a bad idea.")
[2] when checkAndDispatch ==>{{invoked}}==>(if condition ===false)==>
    invoke==>dispatch ==> which invoke==> reducer 

===> can we do this prev steps but between 
    {dispatch  action and invoking reducer}??
    =========================================
    we can introduce code called [middleware] to intercept the action
    before the reducer is invoked.
    --------------------
===> What is middleware ??
    ===================
    …a third-party extension point between dispatching an action, 
    and the moment it reaches the reducer.
    ----------------------
===> Why middleware is important ??
What's great about middleware is that once it receives the action,
it can carry out a number of operations, including:

1. producing a side effect 
    (e.g., logging information about the store)
2. processing the action itself 
    (e.g., making an asynchronous HTTP request)
3. redirecting the action 
    (e.g., to another piece of middleware)
4. dispatching supplementary actions
    ----------------------------
    ===> [How Can We Write middleware]??
    ==============
    let checker = (store)=>{
        return function(next){
            return function(action){
                #some code here
                return next(action);
            }
        }
    }
    {{OR}}
    let checker=(store)=>(next)=>(action)=>{
        #some code here
        return next(action)
    }
[middleware === higher order function]
=======================================
Redux middleware leverages a concept called higher-order functions.
A higher-order function is a function that either:
==>
1. accepts a function as an argument
2. returns a function
==>Higher-order functions are a powerful programming technique 
that allow functions to be significantly more dynamic. 
You've actually already written a higher-order function 
in this course. 
{The createRemoveButton(onClick)} function is a higher-order function 
because the {onClick} parameter is expected to be a function 
(because onClick is set up as an event listener callback function.
----------------------------------------------
add logger middleware
=====================
let logger =(store)=>(next)=>(action)=>{
    console.group(action.type);
      console.log('the action is >>', action);
      let result= next(action);
      console.log('new state is >>', store.getState());
    console.groupEnd()
    return result
}
const store = Redux.createStore(ourReducer ,
    Redux.applyMiddleware(checker,logger))
-----------------------------------------------------
[[in react.js file]]
======================
class App extends React.Component{
    componentDidMount(){
        const {store}= this.props;
        store.subscribe(()=>this.forceUpdate());       
    }
    render(){
        const {store} = this.props;
        const {todos , goals}= store.getState();
        return(
            <div>
                <Todos todos={todos} store={store}/>
                <Goals  goals={goals} store={store}/>
            </div>
        )
    }
}
===>
{{this.forceUpdate()}}
=================
we use this react func because component render when 
1. state changed
OR
2. props changed
!!here we haven't state no state to change
!!when we console our props it was {store}
=========
so if todos or goals changed props still no change 
so we have to use this [forceUpdate()] method 
======================================================

