===>>
JavaScript is single threaded, meaning that two bits of 
script cannot run at the same time; 
they have to run one after another
===>
[Promise]
=========
promise object is used for deferred and 
asynchoronous computations {MDN}
-----------------
[4 words we should know]
=================
1. fulfilled (resolved)==>it worked
2. Rejected ==> it didn't work
3. Pending ==>still waiting
4. Settled ==> something happened
==================================================
Redux Thunk [middleware]
========================
/Asynchoronous ActionCreator [thunk]
function handleDeleteAction (todo){
  return(dispatch)=>{
    dispatch(removeTodoAction(todo.id));
    return API.deleteTodo(todo.id)
      .catch(()=>{
        dispatch(addTodoAction(todo));
        alert("An Error occured try again");
      })
  }
}
#
 # if we don't use thunk middleware
 # redux.min.js:1 Uncaught Error: Actions must be plain objects. 
 # Use custom middleware for async actions.
#
===>
# add thunk(we will create it ) middleware
const Thunk = (store)=>(next)=>(action)=>{
  if(typeof action === 'function'){
    return action(store.dispatch);
  }
  # if action === plain object
    return next(action)
}
const store = Redux.createStore(
    Redux.combineReducers({todos,goals,loading}),
    Redux.applyMiddleware(Thunk,checker , logger )
)
=================================
Benefits of thunk
--------------------
Out of the box, the Redux store can only support the synchronous
flow of data. Middleware like thunk helps support asynchronicity
in a Redux application. You can think of thunk as a wrapper for 
the storeâ€™s dispatch() method; rather than returning action objects,
we can use thunk action creators to dispatch functions (or even or Promises).
Without thunks, synchronous dispatches are the default. 
We could still make API calls from React components (e.g., using the componentDidMount() lifecycle method to make these requests)
===> 
but using thunk middleware gives us a cleaner separation of concerns.
Components don't need to handle what happens after an asynchronous call,
since API logic is moved away from components to action creators.
This also lends itself to greater predictability,
since action creators will become the source of every change in state. 
With thunks, we can dispatch an action only when the server 
request is resolved!
